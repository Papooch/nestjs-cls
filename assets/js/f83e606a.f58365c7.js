"use strict";(self.webpackChunknestjs_cls_docs=self.webpackChunknestjs_cls_docs||[]).push([[8104],{80:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=s(4246),r=s(1670);const o={},a="Request ID",i={id:"features-and-use-cases/request-id",title:"Request ID",description:"Because of a shared storage, CLS is an ideal tool for tracking request (correlation) IDs for the purpose of logging. This package provides an option to automatically generate request IDs in the middleware/guard/interceptor, if you pass { generateId: true } to its options. By default, the generated ID is a string based on Math.random(), but you can provide a custom function in the idGenerator option.",source:"@site/docs/03_features-and-use-cases/01_request-id.md",sourceDirName:"03_features-and-use-cases",slug:"/features-and-use-cases/request-id",permalink:"/nestjs-cls/features-and-use-cases/request-id",draft:!1,unlisted:!1,editUrl:"https://github.com/Papooch/nestjs-cls/tree/main/docs/docs/03_features-and-use-cases/01_request-id.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Features and use cases",permalink:"/nestjs-cls/features-and-use-cases/"},next:{title:"Additional CLS Setup",permalink:"/nestjs-cls/features-and-use-cases/additional-cls-setup"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"request-id",children:"Request ID"}),"\n",(0,n.jsxs)(t.p,{children:["Because of a shared storage, CLS is an ideal tool for tracking request (correlation) IDs for the purpose of logging. This package provides an option to automatically generate request IDs in the middleware/guard/interceptor, if you pass ",(0,n.jsx)(t.code,{children:"{ generateId: true }"})," to its options. By default, the generated ID is a string based on ",(0,n.jsx)(t.code,{children:"Math.random()"}),", but you can provide a custom function in the ",(0,n.jsx)(t.code,{children:"idGenerator"})," option."]}),"\n",(0,n.jsxs)(t.p,{children:["This function receives the ",(0,n.jsx)(t.code,{children:"Request"})," (or the ",(0,n.jsx)(t.code,{children:"ExecutionContext"})," in case the ",(0,n.jsx)(t.code,{children:"interceptor"})," or the ",(0,n.jsx)(t.code,{children:"guard"})," option is used) as the first parameter, which can be used in the generation process and should return (or resolve with) a string ID that will be stored in the CLS for later use."]}),"\n",(0,n.jsx)(t.p,{children:"Below is an example of retrieving the request ID from the request header with a fallback to an autogenerated one."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"ClsModule.forRoot({\n    middleware: {\n        mount: true,\n        // highlight-start\n        generateId: true,\n        idGenerator: (req: Request) =>\n            req.headers['X-Request-Id'] ?? uuid();\n        // highlight-end\n    }\n})\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ID is stored under the ",(0,n.jsx)(t.code,{children:"CLS_ID"})," constant in the context. The ",(0,n.jsx)(t.code,{children:"ClsService"})," provides a shorthand method ",(0,n.jsx)(t.code,{children:"getId"})," to quickly retrieve it anywhere. It can be for example used in a custom logger:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:'title="my.logger.ts"',children:"@Injectable()\nclass MyLogger {\n    constructor(private readonly cls: ClsService) {}\n\n    log(message: string) {\n        // highlight-start\n        console.log(`<${this.cls.getId()}> ${message}`);\n        // highlight-end\n    }\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"Calling this from anywhere within a CLS context results in retrieving the ID:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:'title="my.service.ts"',children:"@Injectable()\nclass MyService {\n    constructor(private readonly logger: MyLogger);\n\n    hello() {\n        this.logger.log('Hello');\n        // -> logs for ex.: \"<44c2d8ff-49a6-4244-869f-75a2df11517a> Hello\"\n    }\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1670:(e,t,s)=>{s.d(t,{Z:()=>i,a:()=>a});var n=s(7378);const r={},o=n.createContext(r);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);
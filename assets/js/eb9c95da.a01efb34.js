"use strict";(self.webpackChunknestjs_cls_docs=self.webpackChunknestjs_cls_docs||[]).push([[7401],{8650:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"setting-up-cls-context/using-a-decorator","title":"Using a Decorator","description":"The @UseCls() decorator can be used at a method level to declaratively wrap the method with a cls.run() call. This method should only be used outside of the context of a web request.","source":"@site/docs/02_setting-up-cls-context/04_using-a-decorator.md","sourceDirName":"02_setting-up-cls-context","slug":"/setting-up-cls-context/using-a-decorator","permalink":"/nestjs-cls/setting-up-cls-context/using-a-decorator","draft":false,"unlisted":false,"editUrl":"https://github.com/Papooch/nestjs-cls/tree/main/docs/docs/02_setting-up-cls-context/04_using-a-decorator.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Using an Interceptor","permalink":"/nestjs-cls/setting-up-cls-context/using-an-interceptor"},"next":{"title":"Using the ClsService Instance","permalink":"/nestjs-cls/setting-up-cls-context/using_cls_run"}}');var o=n(2540),r=n(3023);const c={},i="Using a Decorator",a={},l=[{value:"Gotchas",id:"gotchas",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"using-a-decorator",children:"Using a Decorator"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"@UseCls()"})," decorator can be used at a method level to declaratively wrap the method with a ",(0,o.jsx)(t.code,{children:"cls.run()"})," call. This method should only be used ",(0,o.jsx)(t.a,{href:"/nestjs-cls/features-and-use-cases/usage-outside-of-web-request",children:"outside of the context of a web request"}),"."]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["Please keep in mind, that since the CLS context initialization ",(0,o.jsx)(t.em,{children:"can"})," be async, the ",(0,o.jsx)(t.code,{children:"@UseCls()"})," decorator can ",(0,o.jsx)(t.em,{children:"only"})," be used on ",(0,o.jsx)(t.em,{children:"async"})," function (those that return a ",(0,o.jsx)(t.code,{children:"Promise"}),")."]})}),"\n",(0,o.jsxs)(t.p,{children:["Since there is no request, the ",(0,o.jsx)(t.code,{children:"setup"})," function will not receive a ",(0,o.jsx)(t.code,{children:"Request"})," object. Instead, it will receive the ",(0,o.jsx)(t.code,{children:"this"})," context of the class instance (this also applies to the ",(0,o.jsx)(t.code,{children:"idGenerator"}),"), the ",(0,o.jsx)(t.code,{children:"ClsService"})," reference and all the arguments passed to the decorated method."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"@Injectable()\nclass SomeService {\n    constructor(\n        private readonly cls: ClsService,\n        private readonly otherService: OtherService,\n    ) {}\n\n    @UseCls<[string]>({\n        generateId: true,\n        // highlight-start\n        idGenerator: function (this: SomeService) {\n            return this.generateId();\n        },\n        setup: function (this: SomeService, cls: ClsService, value: string) {\n            cls.set('some-key', 'some-value');\n        },\n        // highlight-end\n    })\n    async startContextualWorkflow(value: string) {\n        return this.otherService.doSomething(value);\n    }\n\n    private generateId() {\n        return Math.random();\n    }\n}\n"})}),"\n",(0,o.jsx)(t.admonition,{type:"warning",children:(0,o.jsxs)(t.p,{children:["It is important to define the ",(0,o.jsx)(t.code,{children:"setup"})," and ",(0,o.jsx)(t.code,{children:"idGenerator"})," functions as ",(0,o.jsx)(t.code,{children:"function"}),"s, not arrow functions, so that the ",(0,o.jsx)(t.code,{children:"this"})," context is properly bound."]})}),"\n",(0,o.jsx)(t.h2,{id:"gotchas",children:"Gotchas"}),"\n",(0,o.jsxs)(t.p,{children:["Since the ",(0,o.jsx)(t.code,{children:"@UseCls()"})," decorator operates on the method's parameters, it must be type-safe. In order to support this, it requires a generic type parameter, which is a tuple of the types of the method's arguments."]}),"\n",(0,o.jsx)(t.p,{children:"If there's a mismatch between the generic argument and the actual method signature, typescript will complain."}),"\n",(0,o.jsxs)(t.p,{children:["This also means that the decorator is not inherently compatible with Nest's ",(0,o.jsx)(t.code,{children:"applyDecorators"})," function for decorator composition, because it would lose the type safety."]}),"\n",(0,o.jsxs)(t.p,{children:["If you ",(0,o.jsx)(t.em,{children:"need to"})," use ",(0,o.jsx)(t.code,{children:"@UseCls()"})," with ",(0,o.jsx)(t.code,{children:"applyDecorators"}),", you have to cast it to to ",(0,o.jsx)(t.code,{children:"MethodDecorator"}),", ",(0,o.jsx)(t.em,{children:"knowing that type-safety will be lost"}),", e.g.:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"export const ProcessWithCls = (queue: string) => {\n    return applyDecorators(\n        UseCls({\n            /* options */\n            // highlight-start\n        }) as MethodDecorator,\n        // highlight-end\n        Process(queue),\n    );\n};\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},3023:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var s=n(3696);const o={},r=s.createContext(o);function c(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);
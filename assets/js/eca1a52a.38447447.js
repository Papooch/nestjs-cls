"use strict";(self.webpackChunknestjs_cls_docs=self.webpackChunknestjs_cls_docs||[]).push([[4873],{6119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var s=n(4246),r=n(1670);const i={},c="Quick Start",o={id:"introduction/quick-start",title:"Quick Start",description:"Background",source:"@site/docs/01_introduction/02_quick-start.md",sourceDirName:"01_introduction",slug:"/introduction/quick-start",permalink:"/nestjs-cls/introduction/quick-start",draft:!1,unlisted:!1,editUrl:"https://github.com/Papooch/nestjs-cls/tree/main/docs/docs/01_introduction/02_quick-start.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Installation",permalink:"/nestjs-cls/introduction/installation"},next:{title:"How it works",permalink:"/nestjs-cls/introduction/how-it-works"}},l={},a=[{value:"Background",id:"background",level:2},{value:"Example",id:"example",level:2},{value:"Register the ClsModule",id:"register-the-clsmodule",level:3},{value:"Create IP-address interceptor",id:"create-ip-address-interceptor",level:3},{value:"Mount interceptor to controller",id:"mount-interceptor-to-controller",level:3},{value:"Access CLS context in service",id:"access-cls-context-in-service",level:3},{value:"That&#39;s it",id:"thats-it",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(t.h2,{id:"background",children:"Background"}),"\n",(0,s.jsxs)(t.p,{children:["This library exposes a dynamic ",(0,s.jsx)(t.code,{children:"ClsModule"})," which exposes the injectable ",(0,s.jsx)(t.code,{children:"ClsService"})," and provides means to setting up and interacting with the CLS context."]}),"\n",(0,s.jsxs)(t.p,{children:["The CLS context is a storage that wraps around a chain of function calls. It can be accessed anywhere during the lifecycle of such chain via the ",(0,s.jsx)(t.code,{children:"ClsService"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.p,{children:"Below is an example of using this library to store the client's IP address in an interceptor and retrieving it in a service without explicitly passing it along."}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["This example assumes you are using HTTP and therefore can use middleware. For usage with non-HTTP transports, see ",(0,s.jsx)(t.a,{href:"/nestjs-cls/setting-up-cls-context/",children:"Setting up CLS context"}),"."]})}),"\n",(0,s.jsx)(t.h3,{id:"register-the-clsmodule",children:"Register the ClsModule"}),"\n",(0,s.jsxs)(t.p,{children:["Register the ",(0,s.jsx)(t.code,{children:"ClsModule"})," and automatically mount the ",(0,s.jsx)(t.code,{children:"ClsMiddleware"})," which wraps the entire request in a shared CLS context on all routes."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="app.module.ts"',children:"@Module({\n    imports: [\n        // highlight-start\n        ClsModule.forRoot({\n            global: true,\n            middleware: { mount: true },\n        }),\n        // highlight-end\n    ],\n    providers: [AppService],\n    controllers: [AppController],\n})\nexport class AppModule {}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"create-ip-address-interceptor",children:"Create IP-address interceptor"}),"\n",(0,s.jsx)(t.p,{children:"Create an interceptor that"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["injects the ",(0,s.jsx)(t.code,{children:"ClsService"})," to get access to the current shared CLS context,"]}),"\n",(0,s.jsx)(t.li,{children:"extract the users's IP address from the request and stores it into the CLS context,"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="user-ip.interceptor.ts"',children:"@Injectable()\nexport class UserIpInterceptor implements NestInterceptor {\n    // highlight-start\n    constructor(private readonly cls: ClsService) {}\n    // highlight-end\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n        const request = context.switchToHttp().getRequest();\n        const userIp = request.connection.remoteAddress;\n        // highlight-start\n        this.cls.set('ip', userIp);\n        // highlight-end\n        return next.handle();\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"mount-interceptor-to-controller",children:"Mount interceptor to controller"}),"\n",(0,s.jsxs)(t.p,{children:["By mounting the ",(0,s.jsx)(t.code,{children:"UserIpInterceptor"})," on the controller, it gets access to the same shared CLS context that the ",(0,s.jsx)(t.code,{children:"ClsMiddleware"})," set up."]}),"\n",(0,s.jsxs)(t.p,{children:["Of course, we could also bind the interceptor globally with ",(0,s.jsx)(t.code,{children:"APP_INTERCEPTOR"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="app.controller.ts"',children:"// highlight-start\n@UseInterceptors(UserIpInterceptor)\n// highlight-end\n@Injectable()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get('/hello')\n    hello() {\n        return this.appService.sayHello();\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"access-cls-context-in-service",children:"Access CLS context in service"}),"\n",(0,s.jsxs)(t.p,{children:["In the ",(0,s.jsx)(t.code,{children:"AppService"}),", we can retrieve the user's IP from the CLS context without explicitly passing in anything, and without making the ",(0,s.jsx)(t.code,{children:"AppService"})," request-scoped!"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="app.service.ts"',children:"@Injectable()\nexport class AppService {\n    // highlight-start\n    constructor(private readonly cls: ClsService) {}\n    // highlight-end\n\n    sayHello() {\n        // highlight-start\n        const userIp = this.cls.get('ip');\n        // highlight-end\n        return 'Hello ' + userIp + '!';\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"thats-it",children:"That's it"}),"\n",(0,s.jsx)(t.p,{children:"This is pretty much all there is to it. This library further provides more quality-of-life features, so read on!"}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["If your use-case is really simple, you can instead consider ",(0,s.jsxs)(t.a,{href:"https://docs.nestjs.com/recipes/async-local-storage#custom-implementation",children:["creating a custom implementation with ",(0,s.jsx)(t.code,{children:"AsyncLocalStorage"})]}),". Limiting the number of dependencies in your application is always a good idea!"]})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1670:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>c});var s=n(7378);const r={},i=s.createContext(r);function c(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);
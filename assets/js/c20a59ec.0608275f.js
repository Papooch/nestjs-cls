"use strict";(self.webpackChunknestjs_cls_docs=self.webpackChunknestjs_cls_docs||[]).push([[3425],{2622:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var n=s(4246),t=s(1670);const i={},r="v3.x \u2192 v4.x",d={id:"migration-guide/v3x-v4x",title:"v3.x \u2192 v4.x",description:"The v4 major version should be largely backwards compatible with v3. However, breaking changes were introduced in some less-used APIs that should be mentioned.",source:"@site/docs/10_migration-guide/02_v3x-v4x.md",sourceDirName:"10_migration-guide",slug:"/migration-guide/v3x-v4x",permalink:"/nestjs-cls/migration-guide/v3x-v4x",draft:!1,unlisted:!1,editUrl:"https://github.com/Papooch/nestjs-cls/tree/main/docs/docs/10_migration-guide/02_v3x-v4x.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"v4.x \u2192 v5.x",permalink:"/nestjs-cls/migration-guide/v4x-v5x"},next:{title:"v2.x \u2192 v3.x",permalink:"/nestjs-cls/migration-guide/v2x-v3x"}},c={},a=[{value:"Changed base type of Proxy Providers",id:"changed-base-type-of-proxy-providers",level:2},{value:"Changed default of <code>ifNested</code> option",id:"changed-default-of-ifnested-option",level:2},{value:"Changed default of <code>resolveProxyProviders</code> in <code>UseCls</code> decorator",id:"changed-default-of-resolveproxyproviders-in-usecls-decorator",level:2}];function l(e){const o={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(o.h1,{id:"v3x--v4x",children:[(0,n.jsx)(o.code,{children:"v3.x"})," \u2192 ",(0,n.jsx)(o.code,{children:"v4.x"})]}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"v4"})," major version should be largely backwards compatible with ",(0,n.jsx)(o.code,{children:"v3"}),". However, breaking changes were introduced in some less-used APIs that should be mentioned."]}),"\n",(0,n.jsx)(o.h2,{id:"changed-base-type-of-proxy-providers",children:"Changed base type of Proxy Providers"}),"\n",(0,n.jsxs)(o.p,{children:["The default underlying value of ",(0,n.jsx)(o.a,{href:"/nestjs-cls/features-and-use-cases/proxy-providers",children:"Proxy Providers"})," was changed to ",(0,n.jsx)(o.code,{children:"{}"}),". This means that the ",(0,n.jsx)(o.code,{children:"typeof"})," operator will now return ",(0,n.jsx)(o.code,{children:"'object'"}),", which is more intuitive. (",(0,n.jsx)(o.a,{href:"https://github.com/Papooch/nestjs-cls/issues/82",children:"Link to original discussion"}),")"]}),"\n",(0,n.jsxs)(o.p,{children:["The use-case of using a Proxy Provider as a function is still supported, but now requires the ",(0,n.jsx)(o.code,{children:"type"})," option to be set to ",(0,n.jsx)(o.code,{children:"'function'"}),"."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",children:"ClsModule.forFeature({\n    provide: 'class-proxy',\n    useClass: SomeClass,\n});\nClsModule.forFeature({\n    provide: 'function-proxy',\n    useFactory: () => someFunction,\n    // highlight-start\n    type: 'function',\n    // highlight-end\n});\n"})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",children:"@Injectable()\nclass SomeService {\n    constructor(\n        @Inject('class-proxy')\n        private readonly someClass: SomeClass,\n        @Inject('function-proxy')\n        private readonly functionProvider: () => void,\n    ) {\n        console.log(typeof this.someClass); // 'object'\n        console.log(typeof this.functionProvider); // 'function'\n    }\n}\n"})}),"\n",(0,n.jsxs)(o.h2,{id:"changed-default-of-ifnested-option",children:["Changed default of ",(0,n.jsx)(o.code,{children:"ifNested"})," option"]}),"\n",(0,n.jsxs)(o.p,{children:["The default of the ",(0,n.jsx)(o.a,{href:"/nestjs-cls/api/service-interface#clscontextoptions",children:(0,n.jsx)(o.code,{children:"ifNested"})})," option was changed from ",(0,n.jsx)(o.code,{children:"override"})," to ",(0,n.jsx)(o.code,{children:"inherit"}),", which more closely aligns with ",(0,n.jsx)(o.em,{children:"most"})," real-world use-cases."]}),"\n",(0,n.jsxs)(o.p,{children:["If you used the ",(0,n.jsx)(o.code,{children:"ClsService#run"})," method ",(0,n.jsx)(o.em,{children:"without"})," explicitly setting the ",(0,n.jsx)(o.code,{children:"ifNested"})," option, you should check if the new default behavior is compatible with your use-case and adjust accordingly."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",children:"this.cls.run(\n    // highlight-start\n    { ifNested: 'override' },\n    // highlight-end\n    () => {\n        // ... rest of the code\n    },\n);\n"})}),"\n",(0,n.jsxs)(o.h2,{id:"changed-default-of-resolveproxyproviders-in-usecls-decorator",children:["Changed default of ",(0,n.jsx)(o.code,{children:"resolveProxyProviders"})," in ",(0,n.jsx)(o.code,{children:"UseCls"})," decorator"]}),"\n",(0,n.jsxs)(o.p,{children:["This value was undocumented in ",(0,n.jsx)(o.code,{children:"v3"}),", but the default was ",(0,n.jsx)(o.code,{children:"false"}),". It was changed to ",(0,n.jsx)(o.code,{children:"true"})," in ",(0,n.jsx)(o.code,{children:"v4"})," to align with the default behavior of other enhancers."]}),"\n",(0,n.jsxs)(o.p,{children:["This change should not affect most use-cases, because you either don't use Proxy Providers at all, or you use them and therefore had to set it to ",(0,n.jsx)(o.code,{children:"true"})," anyway. The only case where this might be a breaking change is if you used the ",(0,n.jsx)(o.code,{children:"@UseCls"})," in a module where you explicitly ",(0,n.jsx)(o.em,{children:"did not"})," want to resolve Proxy Providers and therefore did not import their dependencies. In that case, you should set the ",(0,n.jsx)(o.code,{children:"resolveProxyProviders"})," option to ",(0,n.jsx)(o.code,{children:"false"})," in the decorator."]})]})}function h(e={}){const{wrapper:o}={...(0,t.a)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1670:(e,o,s)=>{s.d(o,{Z:()=>d,a:()=>r});var n=s(7378);const t={},i=n.createContext(t);function r(e){const o=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(i.Provider,{value:o},e.children)}}}]);
"use strict";(self.webpackChunknestjs_cls_docs=self.webpackChunknestjs_cls_docs||[]).push([[1469],{6630:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"introduction/how-it-works","title":"How it works","description":"Continuation-local storage provides a common space for storing and retrieving data throughout the life of a function/callback call chain. In NestJS, this allows for sharing request data across the lifetime of a single request - without the need for request-scoped providers. It also makes it easy to track and log request ids throughout the whole application.","source":"@site/docs/01_introduction/03_how-it-works.md","sourceDirName":"01_introduction","slug":"/introduction/how-it-works","permalink":"/nestjs-cls/introduction/how-it-works","draft":false,"unlisted":false,"editUrl":"https://github.com/Papooch/nestjs-cls/tree/main/docs/docs/01_introduction/03_how-it-works.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Quick Start","permalink":"/nestjs-cls/introduction/quick-start"},"next":{"title":"Setting up the CLS context","permalink":"/nestjs-cls/setting-up-cls-context/"}}');var n=o(2540),i=o(3023);const r={},c="How it works",a={},l=[];function d(t){const e={a:"a",code:"code",h1:"h1",header:"header",p:"p",...(0,i.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.header,{children:(0,n.jsx)(e.h1,{id:"how-it-works",children:"How it works"})}),"\n",(0,n.jsx)(e.p,{children:"Continuation-local storage provides a common space for storing and retrieving data throughout the life of a function/callback call chain. In NestJS, this allows for sharing request data across the lifetime of a single request - without the need for request-scoped providers. It also makes it easy to track and log request ids throughout the whole application."}),"\n",(0,n.jsxs)(e.p,{children:["To make CLS work, it is required to set up the CLS context first. This is done by calling ",(0,n.jsx)(e.code,{children:"cls.run()"})," (or ",(0,n.jsx)(e.code,{children:"cls.enter()"}),", see ",(0,n.jsx)(e.a,{href:"/nestjs-cls/considerations/security",children:"Security considerations"})," for more info) somewhere in the app. Once that is set up, anything that is called within the same callback chain has access to the same storage with ",(0,n.jsx)(e.code,{children:"cls.set()"})," and ",(0,n.jsx)(e.code,{children:"cls.get()"}),"."]})]})}function h(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}},3023:(t,e,o)=>{o.d(e,{R:()=>r,x:()=>c});var s=o(3696);const n={},i=s.createContext(n);function r(t){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:r(t.components),s.createElement(i.Provider,{value:e},t.children)}}}]);
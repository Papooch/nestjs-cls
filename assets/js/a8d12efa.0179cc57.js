"use strict";(self.webpackChunknestjs_cls_docs=self.webpackChunknestjs_cls_docs||[]).push([[7055],{8604:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var t=n(4246),o=n(1670);const a={},r="Usage outside of web request",i={id:"features-and-use-cases/usage-outside-of-web-request",title:"Usage outside of web request",description:"Sometimes, a part of the app that relies on the CLS storage might need to be called outside of the context of a web request - for example, in a Cron job, while consuming a Queue, during the application bootstrap or in CLI apps.",source:"@site/docs/03_features-and-use-cases/04_usage-outside-of-web-request.md",sourceDirName:"03_features-and-use-cases",slug:"/features-and-use-cases/usage-outside-of-web-request",permalink:"/nestjs-cls/features-and-use-cases/usage-outside-of-web-request",draft:!1,unlisted:!1,editUrl:"https://github.com/Papooch/nestjs-cls/tree/main/docs/docs/03_features-and-use-cases/04_usage-outside-of-web-request.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Breaking out of DI",permalink:"/nestjs-cls/features-and-use-cases/breaking-out-of-di"},next:{title:"Type safety and type inference",permalink:"/nestjs-cls/features-and-use-cases/type-safety-and-type-inference"}},c={},u=[];function d(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"usage-outside-of-web-request",children:"Usage outside of web request"}),"\n",(0,t.jsx)(s.p,{children:"Sometimes, a part of the app that relies on the CLS storage might need to be called outside of the context of a web request - for example, in a Cron job, while consuming a Queue, during the application bootstrap or in CLI apps."}),"\n",(0,t.jsx)(s.p,{children:"In such cases, there are no enhancers that can be bound to the handler to set up the context."}),"\n",(0,t.jsxs)(s.p,{children:["Therefore, you as the the developer are responsible for wrapping the execution with ",(0,t.jsx)(s.code,{children:"ClsService#run"}),", or using ",(0,t.jsxs)(s.a,{href:"/nestjs-cls/setting-up-cls-context/using-a-decorator",children:["the ",(0,t.jsx)(s.code,{children:"@UseCls"})," decorator"]}),". In any case, if any following code depends on some context variables, these need to be set up manually."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"@Injectable()\nexport class CronController {\n    constructor(\n        private readonly someService: SomeService,\n        private readonly cls: ClsService,\n    );\n\n    @Cron('45 * * * * *')\n    async handleCronExample1() {\n        // either explicitly wrap the function body with\n        // a call to `ClsService#run` ...\n        await this.cls.run(async () => {\n            this.cls.set('mode', 'cron');\n            await this.someService.doTheThing();\n        });\n    }\n\n    @Cron('90 * * * * *')\n    // ... or use the convenience decorator which\n    // does the wrapping for you seamlessly.\n    @UseCls({\n        setup(cls) {\n            cls.set('mode', 'cron');\n        },\n    })\n    async handleCronExample2() {\n        await this.someService.doTheThing();\n    }\n}\n"})}),"\n",(0,t.jsx)(s.admonition,{type:"caution",children:(0,t.jsxs)(s.p,{children:["Special care must be taken in case you're using ",(0,t.jsx)(s.a,{href:"/nestjs-cls/features-and-use-cases/proxy-providers#outside-web-request",children:"Proxy Providers"}),"."]})})]})}function l(e={}){const{wrapper:s}={...(0,o.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1670:(e,s,n)=>{n.d(s,{Z:()=>i,a:()=>r});var t=n(7378);const o={},a=t.createContext(o);function r(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);